<?php
# This file was automatically generated by the MediaWiki installer.
# If you make manual changes, please keep track in case you need to
# recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# http://www.mediawiki.org/wiki/Manual:Configuration_settings

# If you customize your file layout, set $IP to the directory that contains
# the other MediaWiki files. It will be used as a base to locate files.
if( defined( 'MW_INSTALL_PATH' ) ) {
  $IP = MW_INSTALL_PATH;
} else {
  $IP = dirname( __FILE__ );
}
#echo($IP);

$path = array( $IP, "$IP/includes", "$IP/languages" );
set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );

require_once( "$IP/includes/DefaultSettings.php" );

# If PHP's memory limit is very low, some operations may fail.
ini_set( 'memory_limit', '20M' );

if ( $wgCommandLineMode ) {
  if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
    die( "This script must be run from the command line\n" );
  }
}
## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;
#$wgReadOnly = "We are migrating to new hosting, database is readonly..";

$wgSitename         = "i18n.ro";
$wgRawHtml = true;
$wgAllowExternalImages = true;
$wgAllowExternalImagesFrom = 'http://area51.stackexchange.com';

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath       = "";
$wgScriptExtension  = ".php";
$wgArticlePath  = "/$1";
$wgUsePathInfo  = true;
#$wgUploadPath = "{$wgScriptPath}/images";
#$wgUploadDirectory = "{$IP}/images";

## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL

$wgEnableEmail      = true;
$wgEnableUserEmail  = true;

$wgEmergencyContact = "webmaster@i18n.ro";
$wgPasswordSender = "webmaster@i18n.ro";

## For a detailed description of the following switches see
## http://www.mediawiki.org/wiki/Extension:Email_notification
## and http://www.mediawiki.org/wiki/Extension:Email_notification
## There are many more options for fine tuning available see
## /includes/DefaultSettings.php
## UPO means: this is also a user preference option
$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;

$wgEnotifFromEditor = true; // Set to true sets the From: address of e-mail notification from the Page editor e-mail address, otherwise, the e-mail notification appears to be sent from the wiki server administration address ($wgEmergencyContact).
$wgEnotifWatchlist = true;
$wgEnotifUseRealName = true;
$wgEnotifRevealEditorAddress = true;
$wgUsersNotifiedOnAllChanges = array ('Admin');
//$wgEnotifMinorEdits = false;


$wgDBtype           = "mysql";
$wgDBserver         = "localhost";
$wgDBname           = "i18n_wiki";
$wgDBuser           = "ionutz";
$wgDBpassword       = "mysql589";

# MySQL specific settings
$wgDBprefix         = "";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "ENGINE=InnoDB, DEFAULT CHARSET=utf8";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = true;

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = array();

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads       = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
#$wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;

$wgLocalInterwiki   = $wgSitename;

$wgLanguageCode = "ro"; // do not put "ro" it will break namespaces (sorin)
#$wgLang = "ro"; // TODO: fix the namespaces and switch to romanian
$wgContLang = "ro";

$wgProxyKey = "837c6edb0efbf1834f09ef23722e22266759c0eb17d019cefd8d8935c62ae38e";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook':
#$wgDefaultSkin = 'gumax';
$wgDefaultSkin = 'vector';

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgEnableCreativeCommonsRdf = true;
$wgRightsPage = "MediaWiki:Copyright"; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "licenţă public domain.";
$wgRightsIcon = "http://i18n.ro/images/copyleft.png";
# $wgRightsCode = ""; # Not yet used

$wgDiff3 = "/usr/bin/diff3";

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
$wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );
$wgUseAjax = true;
$smwgAllowNewHelpQuestions = true;
$smwhgEnableLogging = true;

$wgFileExtensions = array( 'png', 'gif', 'jpg', 'jpeg', 'doc', 'xls', 'pdf' );

$wgExportAllowHistory = false;
$wgDisableAnonTalk = true;
$wgShowIPinHeader = false; 

require_once("$IP/extensions/StubManager/StubManager.php");
require_once("$IP/extensions/ParserFunctions/ParserFunctions.php");

//require_once( "$IP/extensions/ParserPhase2/ParserPhase2.php" );

require_once( "$IP/extensions/AJAXPoll/AJAXPoll.php" );
#$wgPollShowVoters = true;
#require_once("$IP/extensions/poll/poll.php");

require_once("$IP/extensions/SyntaxHighlight_GeSHi/SyntaxHighlight_GeSHi.php");
require_once("$IP/extensions/EmailAddressImage/EmailAddressImage.php");

$wgLogo = "/images/wiki.png";

// ============== EXTENSIONS ============================================================
// * Add them ordered by include filenames in the order of the include paths 
// * ident with one tab their properties.
// extensions that are required by others
require_once("$IP/extensions/StubManager/StubManager.php");
// normal extensions
//require_once("$IP/extensions/accesscontrol/accesscontrolSettings.php");

#require_once("$IP/extensions/AsciiTranslitExtension/AsciiTranslitExtension.php");
	$wgAsciiTranslitExtensionHack = true;
require_once("$IP/extensions/CharInsert/CharInsert.php");	
require_once("$IP/extensions/googleAnalytics/googleAnalytics.php");
	// Replace xxxxxxx-x with YOUR GoogleAnalytics UA number
	$wgGoogleAnalyticsAccount = "UA-265361-14";
	# Optional Variables (both default to true)
	$wgGoogleAnalyticsIgnoreSysops = false;
	$wgGoogleAnalyticsIgnoreBots = false;

require_once("$IP/extensions/ImageMap/ImageMap.php");
require_once("$IP/extensions/JSKitComments/JSKitComments.php");
/*require_once("$IP/extensions/LanguageSelector/LanguageSelector.php"); // incompatible
	//$wgLanguageSelectorLanguages=explode(" ", "ro en");
	$wgLanguageSelectorLanguages=explode(" ", "ro en");
	$wgLanguageSelectorDetectLanguage = LANGUAGE_SELECTOR_USE_CONTENT_LANG;
	$wgLanguageSelectorLocation = LANGUAGE_SELECTOR_IN_TOOLBOX;
*/
//require_once("$IP/extensions/NewestPagesBlog.php"); // TODO: incompatible
require_once("$IP/extensions/NewUserNotif/NewUserNotif.php" );
require_once("$IP/extensions/News/News.php");
//require_once('$IP/extensions/Nuke/SpecialNuke.php');
	$wgGroupPermissions['sysop']['nuke'] = true;
	$wgGroupPermissions['*']['edit'] = false;

#	define('Auth_OpenID_RAND_SOURCE', null);
#require_once("$IP/extensions/OpenID/OpenID.php");
//require_once("$IP/extensions/PSINoTocNum.php"); 
require_once("$IP/extensions/SelectCategory/SelectCategory.php");
require_once("$IP/extensions/websiteFrame.php");
require_once("$IP/extensions/Widgets/Widgets.php");
	$wgGroupPermissions['sysop']['editwidgets'] = true;
	$widgetNamespaceIndex = 274;

$wgUseCategoryBrowser   = false; // apar dublate !!!

/**
 * Set this to false to avoid forcing the first letter of links to capitals.
  * WARNING: may break links! This makes links COMPLETELY case-sensitive. Links
   * appearing with a capital at the beginning of a sentence will *not* go to the
    * same place as links in the middle of a sentence using a lowercase initial.
     */
$wgCapitalLinks = false;
$wgAllowDisplayTitle=true; // to allow you to use DISPLAYTITLE
$wgRestrictDisplayTitle = false; // to allow you to use any kind of name with previous option

$wgAjaxSearch = true;

$wgShowExceptionDetails = true;


// activate subpages for main (used for translations)
$wgNamespacesWithSubpages[NS_MAIN] = true;




require_once( "$IP/extensions/include.php" );
$wg_include_allowed_parent_paths = $_SERVER['DOCUMENT_ROOT'];
$wg_include_disallowed_regex = array('/.*LocalSettings.php/', '/.*\.conf/');

# SPECIAL MEASURE FOR SPAM - sorin 16.03.2011

# Prevent new user registrations except by sysops
$wgGroupPermissions['*']['createaccount'] = false;


#--- FB COnnect
require_once("$IP/extensions/Facebook/Facebook.php");
$wgFbAppId  = '148102848563004';
$wgFbSecret = 'e2efee4c26389e2d5bf7449070c96097';
$wgFbDomain = 'i18n.ro';
$wgDefaultUserOptions['rememberpassword'] = true;
$wgFbOpenGraph = true;

$wgHooks['FacebookPermissions'][] = 'fnMyHook';
function fnMyHook( &$scope ) {
    // Unset a permission
    foreach ( $scope as $i => $perm ) {
        if ( $perm == 'email' )
            unset( $scope[$i] );
    }
    // Require an additional permission
    $scope[] = 'publish_actions';
    return true;
}


# Set up user rights to work with our Facebook extension

$wgFbUserRightsFromGroup = '218408921503796';
 
# Disable normal logging-in
$wgFbDisableLogin = false;

  
# Disable reading and editing by anonymous users
#$wgGroupPermissions['*']['edit'] = false;
$wgGroupPermissions['*']['read'] = true;
   
# Reserve normal wiki browsing for only Facebook group members (and admins)
#$wgGroupPermissions['sysop'] = array_merge($wgGroupPermissions['sysop'], $wgGroupPermissions['user']);
#$wgGroupPermissions['user'] = $wgGroupPermissions['fb-user'] = $wgGroupPermissions['*'];
# sorin
$wgGroupPermissions['fb-user']['edit'] = true;    

# But allow all users to read these pages:
$wgWhitelistRead = array('-', 'Special:Connect', 'Special:UserLogin', 'Special:UserLogout');
    
    
#require_once( "$IP/skins/agora/agora.php" );
#require_once( "$IP/skins/erudite/erudite.php" );
?>